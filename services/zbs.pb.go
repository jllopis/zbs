// Code generated by protoc-gen-go.
// source: services/zbs.proto
// DO NOT EDIT!

package services

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type JobArrayMsg struct {
	Jobs  []*JobMsg `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
	Total int32     `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *JobArrayMsg) Reset()                    { *m = JobArrayMsg{} }
func (m *JobArrayMsg) String() string            { return proto.CompactTextString(m) }
func (*JobArrayMsg) ProtoMessage()               {}
func (*JobArrayMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *JobArrayMsg) GetJobs() []*JobMsg {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func (m *JobArrayMsg) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type JobFilterMsg struct {
	Offset  int64          `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Limit   int64          `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Active  int32          `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
	Name    string         `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	From    int64          `protobuf:"varint,5,opt,name=from" json:"from,omitempty"`
	To      int64          `protobuf:"varint,6,opt,name=to" json:"to,omitempty"`
	Sorting *JobSortingMsg `protobuf:"bytes,7,opt,name=sorting" json:"sorting,omitempty"`
}

func (m *JobFilterMsg) Reset()                    { *m = JobFilterMsg{} }
func (m *JobFilterMsg) String() string            { return proto.CompactTextString(m) }
func (*JobFilterMsg) ProtoMessage()               {}
func (*JobFilterMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *JobFilterMsg) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *JobFilterMsg) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *JobFilterMsg) GetActive() int32 {
	if m != nil {
		return m.Active
	}
	return 0
}

func (m *JobFilterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobFilterMsg) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *JobFilterMsg) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *JobFilterMsg) GetSorting() *JobSortingMsg {
	if m != nil {
		return m.Sorting
	}
	return nil
}

// Sorting fields, every fields accepts 'DESC' or 'ASC'
type JobSortingMsg struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Server string `protobuf:"bytes,3,opt,name=server" json:"server,omitempty"`
}

func (m *JobSortingMsg) Reset()                    { *m = JobSortingMsg{} }
func (m *JobSortingMsg) String() string            { return proto.CompactTextString(m) }
func (*JobSortingMsg) ProtoMessage()               {}
func (*JobSortingMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *JobSortingMsg) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JobSortingMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobSortingMsg) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

type JobMsg struct {
	Id      int64       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	JobData *JobDataMsg `protobuf:"bytes,2,opt,name=jobData" json:"jobData,omitempty"`
}

func (m *JobMsg) Reset()                    { *m = JobMsg{} }
func (m *JobMsg) String() string            { return proto.CompactTextString(m) }
func (*JobMsg) ProtoMessage()               {}
func (*JobMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *JobMsg) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *JobMsg) GetJobData() *JobDataMsg {
	if m != nil {
		return m.JobData
	}
	return nil
}

type JobDataMsg struct {
	Active           bool         `protobuf:"varint,1,opt,name=active" json:"active,omitempty"`
	Name             string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Server           string       `protobuf:"bytes,3,opt,name=server" json:"server,omitempty"`
	MountPoint       string       `protobuf:"bytes,4,opt,name=mountPoint" json:"mountPoint,omitempty"`
	LocalPreScript   []*ScriptMsg `protobuf:"bytes,5,rep,name=localPreScript" json:"localPreScript,omitempty"`
	RemotePreScript  []*ScriptMsg `protobuf:"bytes,6,rep,name=remotePreScript" json:"remotePreScript,omitempty"`
	LocalPostScript  []*ScriptMsg `protobuf:"bytes,7,rep,name=localPostScript" json:"localPostScript,omitempty"`
	RemotePostScript []*ScriptMsg `protobuf:"bytes,8,rep,name=remotePostScript" json:"remotePostScript,omitempty"`
	RsyncPath        string       `protobuf:"bytes,9,opt,name=rsyncPath" json:"rsyncPath,omitempty"`
	RsyncOpts        string       `protobuf:"bytes,10,opt,name=rsyncOpts" json:"rsyncOpts,omitempty"`
	Rsh              string       `protobuf:"bytes,11,opt,name=rsh" json:"rsh,omitempty"`
	Exclude          []string     `protobuf:"bytes,12,rep,name=exclude" json:"exclude,omitempty"`
	Include          []string     `protobuf:"bytes,13,rep,name=include" json:"include,omitempty"`
}

func (m *JobDataMsg) Reset()                    { *m = JobDataMsg{} }
func (m *JobDataMsg) String() string            { return proto.CompactTextString(m) }
func (*JobDataMsg) ProtoMessage()               {}
func (*JobDataMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *JobDataMsg) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *JobDataMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobDataMsg) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *JobDataMsg) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

func (m *JobDataMsg) GetLocalPreScript() []*ScriptMsg {
	if m != nil {
		return m.LocalPreScript
	}
	return nil
}

func (m *JobDataMsg) GetRemotePreScript() []*ScriptMsg {
	if m != nil {
		return m.RemotePreScript
	}
	return nil
}

func (m *JobDataMsg) GetLocalPostScript() []*ScriptMsg {
	if m != nil {
		return m.LocalPostScript
	}
	return nil
}

func (m *JobDataMsg) GetRemotePostScript() []*ScriptMsg {
	if m != nil {
		return m.RemotePostScript
	}
	return nil
}

func (m *JobDataMsg) GetRsyncPath() string {
	if m != nil {
		return m.RsyncPath
	}
	return ""
}

func (m *JobDataMsg) GetRsyncOpts() string {
	if m != nil {
		return m.RsyncOpts
	}
	return ""
}

func (m *JobDataMsg) GetRsh() string {
	if m != nil {
		return m.Rsh
	}
	return ""
}

func (m *JobDataMsg) GetExclude() []string {
	if m != nil {
		return m.Exclude
	}
	return nil
}

func (m *JobDataMsg) GetInclude() []string {
	if m != nil {
		return m.Include
	}
	return nil
}

type ScriptMsg struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Lang string `protobuf:"bytes,2,opt,name=lang" json:"lang,omitempty"`
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ScriptMsg) Reset()                    { *m = ScriptMsg{} }
func (m *ScriptMsg) String() string            { return proto.CompactTextString(m) }
func (*ScriptMsg) ProtoMessage()               {}
func (*ScriptMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *ScriptMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScriptMsg) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *ScriptMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*JobArrayMsg)(nil), "services.JobArrayMsg")
	proto.RegisterType((*JobFilterMsg)(nil), "services.JobFilterMsg")
	proto.RegisterType((*JobSortingMsg)(nil), "services.JobSortingMsg")
	proto.RegisterType((*JobMsg)(nil), "services.JobMsg")
	proto.RegisterType((*JobDataMsg)(nil), "services.JobDataMsg")
	proto.RegisterType((*ScriptMsg)(nil), "services.ScriptMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ZbsService service

type ZbsServiceClient interface {
	ListJobs(ctx context.Context, in *JobFilterMsg, opts ...grpc.CallOption) (*JobArrayMsg, error)
	FindJob(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*JobMsg, error)
	AddJob(ctx context.Context, in *JobMsg, opts ...grpc.CallOption) (*IdMessage, error)
	UpdateJob(ctx context.Context, in *JobMsg, opts ...grpc.CallOption) (*JobMsg, error)
	DeleteJob(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*JobMsg, error)
}

type zbsServiceClient struct {
	cc *grpc.ClientConn
}

func NewZbsServiceClient(cc *grpc.ClientConn) ZbsServiceClient {
	return &zbsServiceClient{cc}
}

func (c *zbsServiceClient) ListJobs(ctx context.Context, in *JobFilterMsg, opts ...grpc.CallOption) (*JobArrayMsg, error) {
	out := new(JobArrayMsg)
	err := grpc.Invoke(ctx, "/services.ZbsService/ListJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zbsServiceClient) FindJob(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*JobMsg, error) {
	out := new(JobMsg)
	err := grpc.Invoke(ctx, "/services.ZbsService/FindJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zbsServiceClient) AddJob(ctx context.Context, in *JobMsg, opts ...grpc.CallOption) (*IdMessage, error) {
	out := new(IdMessage)
	err := grpc.Invoke(ctx, "/services.ZbsService/AddJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zbsServiceClient) UpdateJob(ctx context.Context, in *JobMsg, opts ...grpc.CallOption) (*JobMsg, error) {
	out := new(JobMsg)
	err := grpc.Invoke(ctx, "/services.ZbsService/UpdateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zbsServiceClient) DeleteJob(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*JobMsg, error) {
	out := new(JobMsg)
	err := grpc.Invoke(ctx, "/services.ZbsService/DeleteJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ZbsService service

type ZbsServiceServer interface {
	ListJobs(context.Context, *JobFilterMsg) (*JobArrayMsg, error)
	FindJob(context.Context, *IdMessage) (*JobMsg, error)
	AddJob(context.Context, *JobMsg) (*IdMessage, error)
	UpdateJob(context.Context, *JobMsg) (*JobMsg, error)
	DeleteJob(context.Context, *IdMessage) (*JobMsg, error)
}

func RegisterZbsServiceServer(s *grpc.Server, srv ZbsServiceServer) {
	s.RegisterService(&_ZbsService_serviceDesc, srv)
}

func _ZbsService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobFilterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZbsServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ZbsService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZbsServiceServer).ListJobs(ctx, req.(*JobFilterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZbsService_FindJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZbsServiceServer).FindJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ZbsService/FindJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZbsServiceServer).FindJob(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZbsService_AddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZbsServiceServer).AddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ZbsService/AddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZbsServiceServer).AddJob(ctx, req.(*JobMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZbsService_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZbsServiceServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ZbsService/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZbsServiceServer).UpdateJob(ctx, req.(*JobMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZbsService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZbsServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ZbsService/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZbsServiceServer).DeleteJob(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZbsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.ZbsService",
	HandlerType: (*ZbsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListJobs",
			Handler:    _ZbsService_ListJobs_Handler,
		},
		{
			MethodName: "FindJob",
			Handler:    _ZbsService_FindJob_Handler,
		},
		{
			MethodName: "AddJob",
			Handler:    _ZbsService_AddJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _ZbsService_UpdateJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _ZbsService_DeleteJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/zbs.proto",
}

func init() { proto.RegisterFile("services/zbs.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0xe3, 0xc6, 0x89, 0x27, 0x4d, 0x1b, 0x6d, 0x7f, 0x58, 0x45, 0x15, 0x8a, 0x2c, 0x0e,
	0x51, 0x0f, 0x89, 0x1a, 0x6e, 0x20, 0x84, 0x2a, 0x45, 0x2d, 0x4d, 0xa9, 0xa8, 0x5c, 0x71, 0xe1,
	0xb6, 0xb6, 0xb7, 0xee, 0x56, 0xb6, 0x37, 0xda, 0xdd, 0x56, 0x14, 0xc4, 0x85, 0x57, 0xe0, 0x81,
	0x78, 0x08, 0x5e, 0x81, 0x33, 0x77, 0x6e, 0x68, 0xd7, 0x3f, 0x89, 0x9b, 0x16, 0xc1, 0x6d, 0xe6,
	0x9b, 0xf9, 0x3e, 0x7d, 0x33, 0xfb, 0x03, 0x48, 0x52, 0x71, 0xcb, 0x42, 0x2a, 0xc7, 0x9f, 0x02,
	0x39, 0x9a, 0x0b, 0xae, 0x38, 0x6a, 0x97, 0x58, 0x7f, 0x2f, 0xe6, 0x3c, 0x4e, 0xe8, 0x98, 0xcc,
	0xd9, 0x98, 0x64, 0x19, 0x57, 0x44, 0x31, 0x9e, 0x15, 0x7d, 0xfd, 0x9d, 0x8a, 0x1b, 0xf2, 0x34,
	0xe5, 0x59, 0x0e, 0x7b, 0x27, 0xd0, 0x99, 0xf1, 0xe0, 0x50, 0x08, 0x72, 0x77, 0x26, 0x63, 0xf4,
	0x0c, 0xd6, 0xae, 0x79, 0x20, 0xb1, 0x35, 0xb0, 0x87, 0x9d, 0x49, 0x6f, 0x54, 0x92, 0x46, 0x33,
	0x1e, 0x9c, 0xc9, 0xd8, 0x37, 0x55, 0xb4, 0x0d, 0x4d, 0xc5, 0x15, 0x49, 0x70, 0x63, 0x60, 0x0d,
	0x9b, 0x7e, 0x9e, 0x78, 0xdf, 0x2d, 0x58, 0x9f, 0xf1, 0xe0, 0x88, 0x25, 0x8a, 0x0a, 0x2d, 0xb6,
	0x0b, 0x0e, 0xbf, 0xbc, 0x94, 0x54, 0x61, 0x6b, 0x60, 0x0d, 0x6d, 0xbf, 0xc8, 0x34, 0x3d, 0x61,
	0x29, 0x53, 0x86, 0x6e, 0xfb, 0x79, 0xa2, 0xbb, 0x49, 0xa8, 0xd8, 0x2d, 0xc5, 0xb6, 0x51, 0x2d,
	0x32, 0x84, 0x60, 0x2d, 0x23, 0x29, 0xc5, 0x6b, 0x03, 0x6b, 0xe8, 0xfa, 0x26, 0xd6, 0xd8, 0xa5,
	0xe0, 0x29, 0x6e, 0x1a, 0x01, 0x13, 0xa3, 0x0d, 0x68, 0x28, 0x8e, 0x1d, 0x83, 0x34, 0x14, 0x47,
	0x07, 0xd0, 0x92, 0x5c, 0x28, 0x96, 0xc5, 0xb8, 0x35, 0xb0, 0x86, 0x9d, 0xc9, 0x93, 0xda, 0x34,
	0x17, 0x79, 0x4d, 0x0f, 0x55, 0xf6, 0x79, 0xa7, 0xd0, 0xad, 0x55, 0xb4, 0x26, 0x8b, 0x8c, 0x7b,
	0xd7, 0x6f, 0xb0, 0xa8, 0xf2, 0xd2, 0x58, 0xf2, 0xb2, 0x0b, 0x8e, 0xd6, 0xa5, 0xc2, 0xf8, 0x76,
	0xfd, 0x22, 0xf3, 0xde, 0x80, 0x93, 0x2f, 0x6d, 0x49, 0xc5, 0x36, 0x2a, 0x23, 0x68, 0x5d, 0xf3,
	0x60, 0x4a, 0x14, 0x31, 0x42, 0x9d, 0xc9, 0x76, 0xcd, 0x99, 0x2e, 0x18, 0x5b, 0x45, 0x93, 0xf7,
	0xcb, 0x06, 0x58, 0xe0, 0x4b, 0x8b, 0xd2, 0x92, 0xed, 0x95, 0x45, 0xfd, 0x83, 0x39, 0xf4, 0x14,
	0x20, 0xe5, 0x37, 0x99, 0x3a, 0xe7, 0x2c, 0x53, 0xc5, 0x6a, 0x97, 0x10, 0xf4, 0x12, 0x36, 0x12,
	0x1e, 0x92, 0xe4, 0x5c, 0xd0, 0x8b, 0x50, 0xb0, 0xb9, 0xc2, 0x4d, 0x73, 0x23, 0xb6, 0x16, 0x4e,
	0x73, 0x5c, 0x1b, 0xbd, 0xd7, 0x8a, 0x5e, 0xc1, 0xa6, 0xa0, 0x29, 0x57, 0x74, 0xc1, 0x76, 0x1e,
	0x67, 0xdf, 0xef, 0xd5, 0xf4, 0x5c, 0x90, 0x4b, 0x55, 0xd0, 0x5b, 0x7f, 0xa1, 0xdf, 0xeb, 0x45,
	0xaf, 0xa1, 0x57, 0x28, 0x2e, 0xf8, 0xed, 0xc7, 0xf9, 0x2b, 0xcd, 0x68, 0x0f, 0x5c, 0x21, 0xef,
	0xb2, 0xf0, 0x9c, 0xa8, 0x2b, 0xec, 0x9a, 0xd5, 0x2c, 0x80, 0xaa, 0xfa, 0x6e, 0xae, 0x24, 0x86,
	0xa5, 0xaa, 0x06, 0x50, 0x0f, 0x6c, 0x21, 0xaf, 0x70, 0xc7, 0xe0, 0x3a, 0x44, 0x18, 0x5a, 0xf4,
	0x63, 0x98, 0xdc, 0x44, 0x14, 0xaf, 0x0f, 0xec, 0xa1, 0xeb, 0x97, 0xa9, 0xae, 0xb0, 0x2c, 0xaf,
	0x74, 0xf3, 0x4a, 0x91, 0x7a, 0xc7, 0xe0, 0x56, 0x06, 0xab, 0x63, 0xb5, 0xea, 0xf7, 0x3f, 0x21,
	0x59, 0x5c, 0x1e, 0xb5, 0x8e, 0x35, 0x16, 0xe9, 0x2b, 0xa5, 0x0f, 0x7a, 0xdd, 0x37, 0xf1, 0xe4,
	0x77, 0x03, 0xe0, 0x43, 0x20, 0x2f, 0xf2, 0xb1, 0xd1, 0x29, 0xb4, 0xdf, 0x32, 0xa9, 0x66, 0xfa,
	0x0d, 0xef, 0xd6, 0xee, 0x5c, 0xf5, 0x68, 0xfb, 0x3b, 0x35, 0xbc, 0xfc, 0x18, 0xbc, 0xde, 0xd7,
	0x1f, 0x3f, 0xbf, 0x35, 0x00, 0xb5, 0xc7, 0xb7, 0x07, 0x63, 0xf3, 0x09, 0x1c, 0x43, 0xeb, 0x88,
	0x65, 0xd1, 0x8c, 0x07, 0x68, 0x69, 0xb1, 0x27, 0xd1, 0x19, 0x95, 0x92, 0xc4, 0xb4, 0xbf, 0xf2,
	0x79, 0x78, 0x3b, 0x46, 0x63, 0x13, 0x75, 0x4b, 0x8d, 0xf1, 0x67, 0x16, 0x7d, 0x41, 0x53, 0x70,
	0x0e, 0x23, 0xa3, 0xb3, 0x42, 0xe9, 0x3f, 0xa4, 0xec, 0x6d, 0x19, 0x9d, 0xae, 0x57, 0x79, 0x79,
	0x61, 0xed, 0xa3, 0x29, 0xb8, 0xef, 0xe7, 0x11, 0x51, 0xf4, 0x61, 0xa1, 0x55, 0x37, 0x85, 0x4a,
	0xbf, 0xa6, 0x72, 0x02, 0xee, 0x94, 0x26, 0x34, 0x57, 0xf9, 0xbf, 0xb1, 0xf6, 0xeb, 0x63, 0x05,
	0x8e, 0xf9, 0x60, 0x9f, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x81, 0xef, 0x01, 0xb5, 0x05,
	0x00, 0x00,
}
